<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">


	<display-name>photoPro</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:**/spring-*.xml</param-value>
	</context-param>

	<!-- 缺省为webapp.root, 在tomcat下部署两个或多个项目时, 最好参数值不同, 以免引起项目冲突 -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>photo.root</param-value>
	</context-param>

	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!-- <context-param> <param-name>SSO_AGENT_CONFIG_NAME</param-name> <param-value>/WEB-INF/sso.properties</param-value> 
		</context-param> -->

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<listener>
		<listener-class>com.cloudsea.photo.frame.listener.PreSpringContextLoadListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>com.cloudsea.photo.frame.listener.AfterSpringContextLoadListener</listener-class>
	</listener>

	<!-- 监听用户非正常退出登录 -->
	<listener>
		<listener-class>com.cloudsea.photo.frame.listener.LogoutListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- 获取Spring Security session的生命周期 <listener> <listener-class> org.springframework.security.web.session.HttpSessionEventPublisher 
		</listener-class> </listener> -->

	<!-- 定义Spring字符编码过滤器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>AuthFilter</filter-name>
		<filter-class>com.cloudsea.common.filter.AuthFilter</filter-class>
		<init-param>
			<param-name>escapeUrl</param-name>
			<param-value>/menu/getMenuItems, /menu/loadSubPage, /photo/getPicByMenuId, /user/login, /user/main, /user/logout, /user/admin, /user/loginStatus</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>AuthFilter</filter-name>
		<url-pattern>/menu/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>AuthFilter</filter-name>
		<url-pattern>/photo/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>AuthFilter</filter-name>
		<url-pattern>/user/*</url-pattern>
	</filter-mapping>

	<!-- Spring Security过滤器 <filter> <filter-name>springSecurityFilterChain</filter-name> 
		<filter-class> org.springframework.web.filter.DelegatingFilterProxy </filter-class> 
		</filter> <filter-mapping> <filter-name>springSecurityFilterChain</filter-name> 
		<url-pattern>/*</url-pattern> </filter-mapping> -->

	<!-- AutoCRUD过滤器 <filter> <filter-name>AutoCRUDFilter</filter-name> <filter-class> 
		com.cloudsea.sys.web.filter.AutoCRUDFilter </filter-class> </filter> <filter-mapping> 
		<filter-name>AutoCRUDFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> -->

	<!-- OpenSessionInViewFilter 懒加载的问题过滤, 解决由于 Hibernate Session关闭数据访问异常问题，条件是sessionFactiory 
		在springContext中定义 spring配置拦截器<bean name="openSessionInViewInterceptor"...可以达到一样效果 
		<filter> <filter-name>openSessionInViewFilter</filter-name> <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter 
		</filter-class> <init-param> <param-name>sessionFactoryBeanName</param-name> 
		<param-value>sessionFactory</param-value> </init-param> </filter> <filter-mapping> 
		<filter-name>openSessionInViewFilter</filter-name> <url-pattern>/*</url-pattern> 
		</filter-mapping> -->


	<!-- Sitemesh filter <filter> <filter-name>sitemesh</filter-name> <filter-class> 
		com.opensymphony.module.sitemesh.filter.PageFilter </filter-class> </filter> 
		<filter-mapping> <filter-name>sitemesh</filter-name> <url-pattern>*.action</url-pattern> 
		</filter-mapping> -->


	<!-- 定义springmvc DispatcherServlet -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:**/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 激活Tomcat的defaultServlet来处理静态文件,springmvc的mvc:annotation-driven标签找不到视图时找静态资源,也可以达到效果
	<servlet-mapping>
		<servlet-name>jsp</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping> -->

	<!-- webservice的servlet <servlet> <servlet-name>CXFServlet</servlet-name> 
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class> 
		<load-on-startup>3</load-on-startup> </servlet> <servlet-mapping> <servlet-name>CXFServlet</servlet-name> 
		<url-pattern>/ws/*</url-pattern> </servlet-mapping> -->

	<!-- 定义错误页面跳转页面 -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/html/main2.html</location>
	</error-page>


	<session-config>
		<session-timeout>40</session-timeout>
	</session-config>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>


	<display-name>Servlet 3.0 Web Application</display-name>
</web-app>