<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd  
		    http://www.springframework.org/schema/context   
		    http://www.springframework.org/schema/context/spring-context.xsd  
		    http://www.springframework.org/schema/aop  
		    http://www.springframework.org/schema/aop/spring-aop.xsd  
		    http://www.springframework.org/schema/tx  
		    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 指定org.hibernate.context.spi.CurrentSessionContext的实现类，来加载session 1: 
		org.hibernate.context.internal.ThreadLocalSessionContext thread上下文 内置 thread 
		2: org.hibernate.context.internal.JTASessionContext JTA上下文 内置 jta 3: org.hibernate.context.internal.ManagedSessionContext 
		4：org.springframework.orm.hibernate4.SpringSessionContext spring上下文 无内置只能配全路径 -->


	<context:annotation-config />

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<context:component-scan base-package="com.cloudsea" />

	<bean id="propertiesCfg"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:**/*.properties</value>
			</list>
		</property>
	</bean>

	<!-- 如果它未找到${xxx}中定义的xxx键，它还会去JVM系统属性（System.getProperty()）和环境变量（System.getenv()）中寻找 
		此配置的简版<context:property-placeholder location="classpath:classpath*:**/*.properties"/> -->
	<bean id="propertyConfigurer" class="com.cloudsea.photo.frame.util.PropertiesReader">
		<property name="properties" ref="propertiesCfg" />
		<!-- <property name="locations"> <list> <value>classpath*:**/*.properties</value> 
			</list> </property> -->
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>${maxActive}</value>
		</property>
		<property name="maxWait">
			<value>${maxWait}</value>
		</property>
		<property name="maxIdle">
			<value>${maxIdle}</value>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:sqlmap/*.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- spring与mybatis整合配置，扫描所有dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.cloudsea.photo.module.**.dao" 
		p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" 
		> <property name="packagesToScan"> <value>com.cloudsea.*</value> </property> 
		<property name="dataSource" ref="dataSource" /> <property name="hibernateProperties"> 
		<props> <prop key="hibernate.dialect">${hibernate.dialect}</prop> <prop key="hibernate.show_sql">${hibernate.show_sql}</prop> 
		<prop key="hibernate.hbm2ddl.auto">update</prop> <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> 
		<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop> 
		<prop key="hibernate.connection.isolation">${hibernate.connection.isolation}</prop>事务隔离级别 
		<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop> 
		<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.fetch_size}</prop> 
		<prop key="hibernate.jdbc.use_scrollable_resultset">${hibernate.jdbc.use_scrollable_resultset}</prop> 
		<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop> 
		<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop> 
		<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> 
		</props> </property> </bean> -->

	<!-- 事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> <property name="sessionFactory"> 
		<ref bean="sessionFactory"/> </property> </bean> -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 事务拦截器,激活事务管理器所必须的bean -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributeSource">
			<bean
				class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
		</property>
		<!-- 配置事务传播属性 -->
		<property name="transactionAttributes">
			<props>
				<!-- <prop key="insert*">PROPAGATION_REQUIRED</prop> <prop key="save*">PROPAGATION_REQUIRED</prop> 
					<prop key="update*">PROPAGATION_REQUIRED</prop> <prop key="merge*">PROPAGATION_REQUIRED</prop> 
					<prop key="delete*">PROPAGATION_REQUIRED</prop> <prop key="remove*">PROPAGATION_REQUIRED</prop> 
					<prop key="get*">PROPAGATION_REQUIRED</prop> <prop key="query*">PROPAGATION_REQUIRED</prop> -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!--解决由于 Hibernate Session已经关闭，访问延迟加载数据异常问题 <bean name="openSessionInViewInterceptor" 
		class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor"> 
		<property name="sessionFactory"> <ref bean="sessionFactory" /> </property> 
		</bean> -->

	<bean id="exceptionAdvisor" class="com.cloudsea.common.interceptor.ExceptionAdvisor" />

</beans>